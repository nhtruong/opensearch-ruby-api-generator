{{license_header}}
{{legacy_license_header}}
{{generated_code_warning}}

# frozen_string_literal: true

require "cgi"
require "multi_json"

require "opensearch/api/version"
require "opensearch/api/namespace/common"
require "opensearch/api/utils"
require "opensearch/api/actions/params_registry"

Dir[ File.expand_path('../api/actions/**/params_registry.rb', __FILE__) ].each   { |f| require f }
Dir[ File.expand_path('../api/actions/**/*.rb', __FILE__) ].each   { |f| require f }
Dir[ File.expand_path('../api/namespace/**/*.rb', __FILE__) ].each { |f| require f }

module OpenSearch
  module API
    DEFAULT_SERIALIZER = MultiJson

    COMMON_PARAMS = [
    :ignore,                        # Client specific parameters
    :index, :id,                    # :index/:id
    :body,                          # Request body
    :node_id,                       # Cluster
    :name,                          # Alias, template, settings, warmer, ...
    :field                          # Get field mapping
    ]

    COMMON_QUERY_PARAMS = [
    :ignore,                        # Client specific parameters
    :format,                        # Search, Cat, ...
    :pretty,                        # Pretty-print the response
    :human,                         # Return numeric values in human readable format
    :filter_path,                   # Filter the JSON response
    :opaque_id                      # Use X-Opaque-Id
    ]

    HTTP_GET          = 'GET'.freeze
    HTTP_HEAD         = 'HEAD'.freeze
    HTTP_POST         = 'POST'.freeze
    HTTP_PUT          = 'PUT'.freeze
    HTTP_DELETE       = 'DELETE'.freeze

    UNDERSCORE_SEARCH = '_search'.freeze
    UNDERSCORE_ALL    = '_all'.freeze
    DEFAULT_DOC       = '_doc'.freeze

    # Auto-include all namespaces in the receiver
    def self.included(base)
      base.send :include,
        OpenSearch::API::Common,
        OpenSearch::API::Actions,
        {{#namespace_modules}}
        {{name}}{{comma}}
        {{/namespace_modules}}
    end

    # The serializer class
    def self.serializer
      settings[:serializer] || DEFAULT_SERIALIZER
    end

    # Access the module settings
    def self.settings
      @settings ||= {}
    end
  end
end

