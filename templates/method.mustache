/**
 * {{method_description}}
 * <br/> See Also: {@link {{external_docs}} - {{doc_namespace}} - {{doc_method_name}}}
 *
 * @memberOf API-{{camelized_namespace}}
 *
 * @param {Object} params
 {{#argument_descriptions}}
 * @param {{{data_type}}} {{name}}{{#deprecated}}DEPRECATED {{/deprecated}}{{#default}}(default: {{default}}){{/default}}{{description}}
 {{/argument_descriptions}}
 *
 * @param {Object} options - Options for {@link Transport#request}
 * @param {function} callback - Callback that handles errors and response
 *
 * @returns {{{double_curly}}}abort: function(), then: function(), catch: function()}|Promise<never>|*}
 */
{{camelized_namespace}}Api.prototype.{{prototype_name}} = function {{function_name}}(params, options, callback) {
  {{#required_params}}
  if (params.{{camel_name}} == null{{#has_snake_name}} && params.{{snake_name}} == null{{/has_snake_name}}) {
    const err = new this[kConfigurationError]('Missing required parameter: {{snake_name}}');
    return handleError(err, callback);
  }
  {{#_blank_line}}

  {{/_blank_line}}
  {{/required_params}}
  let { method, body, {{#path_param_names}}{{name}}, {{/path_param_names}}...querystring } = params;

  {{#path_param_encodings}}
  {{snake_name}} = encodePathParam({{names}});
  {{#_blank_line}}

  {{/_blank_line}}
  {{/path_param_encodings}}
  let path = [{{{url_components}}}].filter((c) => c != null).join('/');
  method = method || {{{http_verb}}};
  body = body || '';
  querystring = snakeCaseKeys(null, snakeCase, querystring);

  return this.transport.request({ method, path, body, querystring }, options, callback);
};