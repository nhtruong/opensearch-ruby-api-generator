module Actions
  {{valid_params_constant_name}} = Set.new(%i[
    {{#query_args}}
    {{arg}}
    {{/query_args}}
  ]).freeze

  {{#method_description}}
  # {{{description}}}
  {{/method_description}}
  #
  {{#argument_descriptions}}
  # @option arguments [{{data_type}}] :{{name}} - {{#required}}* Required * {{/required}}{{#deprecated}}DEPRECATED {{/deprecated}}{{#default}}(default: {{default}} {{/default}}{{description}}
  {{/argument_descriptions}}
  def {{method_name}}(arguments = {})
    {{#required_args}}
    raise ArgumentError, "Required argument '{{arg}}' missing" unless arguments[:{{arg}}]
    {{/required_args}}

    arguments = arguments.clone
    {{#path_args}}

    {{#listify}}
    _{{arg}} = Utils.__listify(arguments.delete(:{{arg}}))
    {{/listify}}
    {{^listify}}
    _{{arg}} = arguments.delete(:{{arg}})
    {{/listify}}
    {{/path_args}}

    headers = arguments.delete(:headers) || {}
    body    = arguments.delete(:body)
    params  = Utils.__validate_and_extract_params arguments, {{valid_params_constant_name}}
    url     = Utils.__pathify {{{url_components}}}
    method  = {{{http_verb}}}

    {{#listify_query_args}}
    params[:{{arg}}] = Utils.__listify(params[:{{arg}}]) if params[:{{arg}}]
    {{/listify_query_args}}

    perform_request(method, url, params, body, headers).body
  end
end
