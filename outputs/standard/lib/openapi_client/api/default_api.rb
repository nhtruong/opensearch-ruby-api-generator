=begin
#OpenSearch

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 2021-11-23

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.1

=end

require 'cgi'

module OpenapiClient
  class DefaultApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Removes a document from the index.
    # @param index [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :master_timeout 
    # @option opts [String] :cluster_manager_timeout 
    # @option opts [Boolean] :allow_no_indices 
    # @option opts [ExpandWildcards] :expand_wildcards 
    # @option opts [Boolean] :ignore_unavailable 
    # @option opts [String] :timeout 
    # @return [DeleteIndexResponseContent]
    def delete_index(index, opts = {})
      data, _status_code, _headers = delete_index_with_http_info(index, opts)
      data
    end

    # Removes a document from the index.
    # @param index [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :master_timeout 
    # @option opts [String] :cluster_manager_timeout 
    # @option opts [Boolean] :allow_no_indices 
    # @option opts [ExpandWildcards] :expand_wildcards 
    # @option opts [Boolean] :ignore_unavailable 
    # @option opts [String] :timeout 
    # @return [Array<(DeleteIndexResponseContent, Integer, Hash)>] DeleteIndexResponseContent data, response status code and response headers
    def delete_index_with_http_info(index, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.delete_index ...'
      end
      # verify the required parameter 'index' is set
      if @api_client.config.client_side_validation && index.nil?
        fail ArgumentError, "Missing the required parameter 'index' when calling DefaultApi.delete_index"
      end
      pattern = Regexp.new(/^[^+_\-\.][^\\, \/*?"<>| ,#\nA-Z]+$/)
      if @api_client.config.client_side_validation && index !~ pattern
        fail ArgumentError, "invalid value for 'index' when calling DefaultApi.delete_index, must conform to the pattern #{pattern}."
      end

      pattern = Regexp.new(/^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$/)
      if @api_client.config.client_side_validation && !opts[:'master_timeout'].nil? && opts[:'master_timeout'] !~ pattern
        fail ArgumentError, "invalid value for 'opts[:\"master_timeout\"]' when calling DefaultApi.delete_index, must conform to the pattern #{pattern}."
      end

      pattern = Regexp.new(/^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$/)
      if @api_client.config.client_side_validation && !opts[:'cluster_manager_timeout'].nil? && opts[:'cluster_manager_timeout'] !~ pattern
        fail ArgumentError, "invalid value for 'opts[:\"cluster_manager_timeout\"]' when calling DefaultApi.delete_index, must conform to the pattern #{pattern}."
      end

      pattern = Regexp.new(/^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$/)
      if @api_client.config.client_side_validation && !opts[:'timeout'].nil? && opts[:'timeout'] !~ pattern
        fail ArgumentError, "invalid value for 'opts[:\"timeout\"]' when calling DefaultApi.delete_index, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/{index}'.sub('{' + 'index' + '}', CGI.escape(index.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'master_timeout'] = opts[:'master_timeout'] if !opts[:'master_timeout'].nil?
      query_params[:'cluster_manager_timeout'] = opts[:'cluster_manager_timeout'] if !opts[:'cluster_manager_timeout'].nil?
      query_params[:'allow_no_indices'] = opts[:'allow_no_indices'] if !opts[:'allow_no_indices'].nil?
      query_params[:'expand_wildcards'] = opts[:'expand_wildcards'] if !opts[:'expand_wildcards'].nil?
      query_params[:'ignore_unavailable'] = opts[:'ignore_unavailable'] if !opts[:'ignore_unavailable'].nil?
      query_params[:'timeout'] = opts[:'timeout'] if !opts[:'timeout'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DeleteIndexResponseContent'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['smithy.api.httpBasicAuth']

      new_options = opts.merge(
        :operation => :"DefaultApi.delete_index",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#delete_index\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns information about indices: number of primaries and replicas, document counts, disk size, etc.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :master_timeout 
    # @option opts [String] :cluster_manager_timeout 
    # @option opts [Integer] :bytes 
    # @option opts [ExpandWildcards] :expand_wildcards 
    # @option opts [HealthStatus] :health 
    # @option opts [Boolean] :include_unloaded_segments 
    # @option opts [Boolean] :pri 
    # @option opts [String] :time 
    # @option opts [String] :format 
    # @return [Object]
    def get_cat_indices(opts = {})
      data, _status_code, _headers = get_cat_indices_with_http_info(opts)
      data
    end

    # Returns information about indices: number of primaries and replicas, document counts, disk size, etc.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :master_timeout 
    # @option opts [String] :cluster_manager_timeout 
    # @option opts [Integer] :bytes 
    # @option opts [ExpandWildcards] :expand_wildcards 
    # @option opts [HealthStatus] :health 
    # @option opts [Boolean] :include_unloaded_segments 
    # @option opts [Boolean] :pri 
    # @option opts [String] :time 
    # @option opts [String] :format 
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def get_cat_indices_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_cat_indices ...'
      end
      pattern = Regexp.new(/^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$/)
      if @api_client.config.client_side_validation && !opts[:'master_timeout'].nil? && opts[:'master_timeout'] !~ pattern
        fail ArgumentError, "invalid value for 'opts[:\"master_timeout\"]' when calling DefaultApi.get_cat_indices, must conform to the pattern #{pattern}."
      end

      pattern = Regexp.new(/^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$/)
      if @api_client.config.client_side_validation && !opts[:'cluster_manager_timeout'].nil? && opts[:'cluster_manager_timeout'] !~ pattern
        fail ArgumentError, "invalid value for 'opts[:\"cluster_manager_timeout\"]' when calling DefaultApi.get_cat_indices, must conform to the pattern #{pattern}."
      end

      pattern = Regexp.new(/^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$/)
      if @api_client.config.client_side_validation && !opts[:'time'].nil? && opts[:'time'] !~ pattern
        fail ArgumentError, "invalid value for 'opts[:\"time\"]' when calling DefaultApi.get_cat_indices, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/_cat/indices'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'master_timeout'] = opts[:'master_timeout'] if !opts[:'master_timeout'].nil?
      query_params[:'cluster_manager_timeout'] = opts[:'cluster_manager_timeout'] if !opts[:'cluster_manager_timeout'].nil?
      query_params[:'bytes'] = opts[:'bytes'] if !opts[:'bytes'].nil?
      query_params[:'expand_wildcards'] = opts[:'expand_wildcards'] if !opts[:'expand_wildcards'].nil?
      query_params[:'health'] = opts[:'health'] if !opts[:'health'].nil?
      query_params[:'include_unloaded_segments'] = opts[:'include_unloaded_segments'] if !opts[:'include_unloaded_segments'].nil?
      query_params[:'pri'] = opts[:'pri'] if !opts[:'pri'].nil?
      query_params[:'time'] = opts[:'time'] if !opts[:'time'].nil?
      query_params[:'format'] = opts[:'format'] if !opts[:'format'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['smithy.api.httpBasicAuth']

      new_options = opts.merge(
        :operation => :"DefaultApi.get_cat_indices",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_cat_indices\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns information about indices: number of primaries and replicas, document counts, disk size, etc.
    # @param index [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :master_timeout 
    # @option opts [String] :cluster_manager_timeout 
    # @option opts [Integer] :bytes 
    # @option opts [ExpandWildcards] :expand_wildcards 
    # @option opts [HealthStatus] :health 
    # @option opts [Boolean] :include_unloaded_segments 
    # @option opts [Boolean] :pri 
    # @option opts [String] :time 
    # @option opts [String] :format 
    # @return [Object]
    def get_cat_indices_with_index(index, opts = {})
      data, _status_code, _headers = get_cat_indices_with_index_with_http_info(index, opts)
      data
    end

    # Returns information about indices: number of primaries and replicas, document counts, disk size, etc.
    # @param index [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :master_timeout 
    # @option opts [String] :cluster_manager_timeout 
    # @option opts [Integer] :bytes 
    # @option opts [ExpandWildcards] :expand_wildcards 
    # @option opts [HealthStatus] :health 
    # @option opts [Boolean] :include_unloaded_segments 
    # @option opts [Boolean] :pri 
    # @option opts [String] :time 
    # @option opts [String] :format 
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def get_cat_indices_with_index_with_http_info(index, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_cat_indices_with_index ...'
      end
      # verify the required parameter 'index' is set
      if @api_client.config.client_side_validation && index.nil?
        fail ArgumentError, "Missing the required parameter 'index' when calling DefaultApi.get_cat_indices_with_index"
      end
      pattern = Regexp.new(/^[^+_\-\.][^\\, \/*?"<>| ,#\nA-Z]+$/)
      if @api_client.config.client_side_validation && index !~ pattern
        fail ArgumentError, "invalid value for 'index' when calling DefaultApi.get_cat_indices_with_index, must conform to the pattern #{pattern}."
      end

      pattern = Regexp.new(/^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$/)
      if @api_client.config.client_side_validation && !opts[:'master_timeout'].nil? && opts[:'master_timeout'] !~ pattern
        fail ArgumentError, "invalid value for 'opts[:\"master_timeout\"]' when calling DefaultApi.get_cat_indices_with_index, must conform to the pattern #{pattern}."
      end

      pattern = Regexp.new(/^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$/)
      if @api_client.config.client_side_validation && !opts[:'cluster_manager_timeout'].nil? && opts[:'cluster_manager_timeout'] !~ pattern
        fail ArgumentError, "invalid value for 'opts[:\"cluster_manager_timeout\"]' when calling DefaultApi.get_cat_indices_with_index, must conform to the pattern #{pattern}."
      end

      pattern = Regexp.new(/^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$/)
      if @api_client.config.client_side_validation && !opts[:'time'].nil? && opts[:'time'] !~ pattern
        fail ArgumentError, "invalid value for 'opts[:\"time\"]' when calling DefaultApi.get_cat_indices_with_index, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/_cat/indices/{index}'.sub('{' + 'index' + '}', CGI.escape(index.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'master_timeout'] = opts[:'master_timeout'] if !opts[:'master_timeout'].nil?
      query_params[:'cluster_manager_timeout'] = opts[:'cluster_manager_timeout'] if !opts[:'cluster_manager_timeout'].nil?
      query_params[:'bytes'] = opts[:'bytes'] if !opts[:'bytes'].nil?
      query_params[:'expand_wildcards'] = opts[:'expand_wildcards'] if !opts[:'expand_wildcards'].nil?
      query_params[:'health'] = opts[:'health'] if !opts[:'health'].nil?
      query_params[:'include_unloaded_segments'] = opts[:'include_unloaded_segments'] if !opts[:'include_unloaded_segments'].nil?
      query_params[:'pri'] = opts[:'pri'] if !opts[:'pri'].nil?
      query_params[:'time'] = opts[:'time'] if !opts[:'time'].nil?
      query_params[:'format'] = opts[:'format'] if !opts[:'format'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['smithy.api.httpBasicAuth']

      new_options = opts.merge(
        :operation => :"DefaultApi.get_cat_indices_with_index",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_cat_indices_with_index\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns basic statistics about performance of cluster nodes.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :master_timeout 
    # @option opts [String] :cluster_manager_timeout 
    # @option opts [Integer] :bytes 
    # @option opts [Boolean] :full_id 
    # @option opts [Boolean] :local 
    # @option opts [String] :time 
    # @option opts [Boolean] :include_unloaded_segments 
    # @option opts [String] :format 
    # @return [Object]
    def get_cat_nodes(opts = {})
      data, _status_code, _headers = get_cat_nodes_with_http_info(opts)
      data
    end

    # Returns basic statistics about performance of cluster nodes.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :master_timeout 
    # @option opts [String] :cluster_manager_timeout 
    # @option opts [Integer] :bytes 
    # @option opts [Boolean] :full_id 
    # @option opts [Boolean] :local 
    # @option opts [String] :time 
    # @option opts [Boolean] :include_unloaded_segments 
    # @option opts [String] :format 
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def get_cat_nodes_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_cat_nodes ...'
      end
      pattern = Regexp.new(/^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$/)
      if @api_client.config.client_side_validation && !opts[:'master_timeout'].nil? && opts[:'master_timeout'] !~ pattern
        fail ArgumentError, "invalid value for 'opts[:\"master_timeout\"]' when calling DefaultApi.get_cat_nodes, must conform to the pattern #{pattern}."
      end

      pattern = Regexp.new(/^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$/)
      if @api_client.config.client_side_validation && !opts[:'cluster_manager_timeout'].nil? && opts[:'cluster_manager_timeout'] !~ pattern
        fail ArgumentError, "invalid value for 'opts[:\"cluster_manager_timeout\"]' when calling DefaultApi.get_cat_nodes, must conform to the pattern #{pattern}."
      end

      pattern = Regexp.new(/^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$/)
      if @api_client.config.client_side_validation && !opts[:'time'].nil? && opts[:'time'] !~ pattern
        fail ArgumentError, "invalid value for 'opts[:\"time\"]' when calling DefaultApi.get_cat_nodes, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/_cat/nodes'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'master_timeout'] = opts[:'master_timeout'] if !opts[:'master_timeout'].nil?
      query_params[:'cluster_manager_timeout'] = opts[:'cluster_manager_timeout'] if !opts[:'cluster_manager_timeout'].nil?
      query_params[:'bytes'] = opts[:'bytes'] if !opts[:'bytes'].nil?
      query_params[:'full_id'] = opts[:'full_id'] if !opts[:'full_id'].nil?
      query_params[:'local'] = opts[:'local'] if !opts[:'local'].nil?
      query_params[:'time'] = opts[:'time'] if !opts[:'time'].nil?
      query_params[:'include_unloaded_segments'] = opts[:'include_unloaded_segments'] if !opts[:'include_unloaded_segments'].nil?
      query_params[:'format'] = opts[:'format'] if !opts[:'format'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['smithy.api.httpBasicAuth']

      new_options = opts.merge(
        :operation => :"DefaultApi.get_cat_nodes",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_cat_nodes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns whether the cluster is running.
    # @param [Hash] opts the optional parameters
    # @return [GetClusterInfoResponseContent]
    def get_cluster_info(opts = {})
      data, _status_code, _headers = get_cluster_info_with_http_info(opts)
      data
    end

    # Returns whether the cluster is running.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetClusterInfoResponseContent, Integer, Hash)>] GetClusterInfoResponseContent data, response status code and response headers
    def get_cluster_info_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_cluster_info ...'
      end
      # resource path
      local_var_path = '/'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetClusterInfoResponseContent'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['smithy.api.httpBasicAuth']

      new_options = opts.merge(
        :operation => :"DefaultApi.get_cluster_info",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_cluster_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns cluster settings.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :master_timeout 
    # @option opts [String] :cluster_manager_timeout 
    # @option opts [Boolean] :flat_settings 
    # @option opts [Boolean] :include_defaults 
    # @return [GetClusterSettingsResponseContent]
    def get_cluster_settings(opts = {})
      data, _status_code, _headers = get_cluster_settings_with_http_info(opts)
      data
    end

    # Returns cluster settings.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :master_timeout 
    # @option opts [String] :cluster_manager_timeout 
    # @option opts [Boolean] :flat_settings 
    # @option opts [Boolean] :include_defaults 
    # @return [Array<(GetClusterSettingsResponseContent, Integer, Hash)>] GetClusterSettingsResponseContent data, response status code and response headers
    def get_cluster_settings_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_cluster_settings ...'
      end
      pattern = Regexp.new(/^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$/)
      if @api_client.config.client_side_validation && !opts[:'master_timeout'].nil? && opts[:'master_timeout'] !~ pattern
        fail ArgumentError, "invalid value for 'opts[:\"master_timeout\"]' when calling DefaultApi.get_cluster_settings, must conform to the pattern #{pattern}."
      end

      pattern = Regexp.new(/^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$/)
      if @api_client.config.client_side_validation && !opts[:'cluster_manager_timeout'].nil? && opts[:'cluster_manager_timeout'] !~ pattern
        fail ArgumentError, "invalid value for 'opts[:\"cluster_manager_timeout\"]' when calling DefaultApi.get_cluster_settings, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/_cluster/settings'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'master_timeout'] = opts[:'master_timeout'] if !opts[:'master_timeout'].nil?
      query_params[:'cluster_manager_timeout'] = opts[:'cluster_manager_timeout'] if !opts[:'cluster_manager_timeout'].nil?
      query_params[:'flat_settings'] = opts[:'flat_settings'] if !opts[:'flat_settings'].nil?
      query_params[:'include_defaults'] = opts[:'include_defaults'] if !opts[:'include_defaults'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetClusterSettingsResponseContent'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['smithy.api.httpBasicAuth']

      new_options = opts.merge(
        :operation => :"DefaultApi.get_cluster_settings",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_cluster_settings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns a document
    # @param index [String] 
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :preference 
    # @option opts [Boolean] :realtime 
    # @option opts [Boolean] :refresh 
    # @option opts [String] :routing 
    # @option opts [Boolean] :stored_fields 
    # @option opts [String] :_source 
    # @option opts [String] :_source_excludes 
    # @option opts [String] :_source_includes 
    # @option opts [Integer] :version 
    # @option opts [VersionType] :version_type 
    # @return [GetDocumentDocResponseContent]
    def get_document_doc(index, id, opts = {})
      data, _status_code, _headers = get_document_doc_with_http_info(index, id, opts)
      data
    end

    # Returns a document
    # @param index [String] 
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :preference 
    # @option opts [Boolean] :realtime 
    # @option opts [Boolean] :refresh 
    # @option opts [String] :routing 
    # @option opts [Boolean] :stored_fields 
    # @option opts [String] :_source 
    # @option opts [String] :_source_excludes 
    # @option opts [String] :_source_includes 
    # @option opts [Integer] :version 
    # @option opts [VersionType] :version_type 
    # @return [Array<(GetDocumentDocResponseContent, Integer, Hash)>] GetDocumentDocResponseContent data, response status code and response headers
    def get_document_doc_with_http_info(index, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_document_doc ...'
      end
      # verify the required parameter 'index' is set
      if @api_client.config.client_side_validation && index.nil?
        fail ArgumentError, "Missing the required parameter 'index' when calling DefaultApi.get_document_doc"
      end
      pattern = Regexp.new(/^[^+_\-\.][^\\, \/*?"<>| ,#\nA-Z]+$/)
      if @api_client.config.client_side_validation && index !~ pattern
        fail ArgumentError, "invalid value for 'index' when calling DefaultApi.get_document_doc, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.get_document_doc"
      end
      # resource path
      local_var_path = '/{index}/_doc/{id}'.sub('{' + 'index' + '}', CGI.escape(index.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'preference'] = opts[:'preference'] if !opts[:'preference'].nil?
      query_params[:'realtime'] = opts[:'realtime'] if !opts[:'realtime'].nil?
      query_params[:'refresh'] = opts[:'refresh'] if !opts[:'refresh'].nil?
      query_params[:'routing'] = opts[:'routing'] if !opts[:'routing'].nil?
      query_params[:'stored_fields'] = opts[:'stored_fields'] if !opts[:'stored_fields'].nil?
      query_params[:'_source'] = opts[:'_source'] if !opts[:'_source'].nil?
      query_params[:'_source_excludes'] = opts[:'_source_excludes'] if !opts[:'_source_excludes'].nil?
      query_params[:'_source_includes'] = opts[:'_source_includes'] if !opts[:'_source_includes'].nil?
      query_params[:'version'] = opts[:'version'] if !opts[:'version'].nil?
      query_params[:'version_type'] = opts[:'version_type'] if !opts[:'version_type'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetDocumentDocResponseContent'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['smithy.api.httpBasicAuth']

      new_options = opts.merge(
        :operation => :"DefaultApi.get_document_doc",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_document_doc\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns a document.
    # @param index [String] 
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :preference 
    # @option opts [Boolean] :realtime 
    # @option opts [Boolean] :refresh 
    # @option opts [String] :routing 
    # @option opts [Boolean] :stored_fields 
    # @option opts [String] :_source 
    # @option opts [String] :_source_excludes 
    # @option opts [String] :_source_includes 
    # @option opts [Integer] :version 
    # @option opts [VersionType] :version_type 
    # @return [nil]
    def get_document_source(index, id, opts = {})
      get_document_source_with_http_info(index, id, opts)
      nil
    end

    # Returns a document.
    # @param index [String] 
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :preference 
    # @option opts [Boolean] :realtime 
    # @option opts [Boolean] :refresh 
    # @option opts [String] :routing 
    # @option opts [Boolean] :stored_fields 
    # @option opts [String] :_source 
    # @option opts [String] :_source_excludes 
    # @option opts [String] :_source_includes 
    # @option opts [Integer] :version 
    # @option opts [VersionType] :version_type 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def get_document_source_with_http_info(index, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_document_source ...'
      end
      # verify the required parameter 'index' is set
      if @api_client.config.client_side_validation && index.nil?
        fail ArgumentError, "Missing the required parameter 'index' when calling DefaultApi.get_document_source"
      end
      pattern = Regexp.new(/^[^+_\-\.][^\\, \/*?"<>| ,#\nA-Z]+$/)
      if @api_client.config.client_side_validation && index !~ pattern
        fail ArgumentError, "invalid value for 'index' when calling DefaultApi.get_document_source, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.get_document_source"
      end
      # resource path
      local_var_path = '/{index}/_source/{id}'.sub('{' + 'index' + '}', CGI.escape(index.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'preference'] = opts[:'preference'] if !opts[:'preference'].nil?
      query_params[:'realtime'] = opts[:'realtime'] if !opts[:'realtime'].nil?
      query_params[:'refresh'] = opts[:'refresh'] if !opts[:'refresh'].nil?
      query_params[:'routing'] = opts[:'routing'] if !opts[:'routing'].nil?
      query_params[:'stored_fields'] = opts[:'stored_fields'] if !opts[:'stored_fields'].nil?
      query_params[:'_source'] = opts[:'_source'] if !opts[:'_source'].nil?
      query_params[:'_source_excludes'] = opts[:'_source_excludes'] if !opts[:'_source_excludes'].nil?
      query_params[:'_source_includes'] = opts[:'_source_includes'] if !opts[:'_source_includes'].nil?
      query_params[:'version'] = opts[:'version'] if !opts[:'version'].nil?
      query_params[:'version_type'] = opts[:'version_type'] if !opts[:'version_type'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['smithy.api.httpBasicAuth']

      new_options = opts.merge(
        :operation => :"DefaultApi.get_document_source",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_document_source\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # The get settings API operation returns all the settings in your index.
    # @param index [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :master_timeout 
    # @option opts [String] :cluster_manager_timeout 
    # @option opts [Boolean] :allow_no_indices 
    # @option opts [ExpandWildcards] :expand_wildcards 
    # @option opts [Boolean] :flat_settings 
    # @option opts [String] :include_defaults 
    # @option opts [Boolean] :ignore_unavailable 
    # @option opts [Boolean] :local 
    # @return [Object]
    def get_settings_index(index, opts = {})
      data, _status_code, _headers = get_settings_index_with_http_info(index, opts)
      data
    end

    # The get settings API operation returns all the settings in your index.
    # @param index [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :master_timeout 
    # @option opts [String] :cluster_manager_timeout 
    # @option opts [Boolean] :allow_no_indices 
    # @option opts [ExpandWildcards] :expand_wildcards 
    # @option opts [Boolean] :flat_settings 
    # @option opts [String] :include_defaults 
    # @option opts [Boolean] :ignore_unavailable 
    # @option opts [Boolean] :local 
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def get_settings_index_with_http_info(index, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_settings_index ...'
      end
      # verify the required parameter 'index' is set
      if @api_client.config.client_side_validation && index.nil?
        fail ArgumentError, "Missing the required parameter 'index' when calling DefaultApi.get_settings_index"
      end
      pattern = Regexp.new(/^[^+_\-\.][^\\, \/*?"<>| ,#\nA-Z]+$/)
      if @api_client.config.client_side_validation && index !~ pattern
        fail ArgumentError, "invalid value for 'index' when calling DefaultApi.get_settings_index, must conform to the pattern #{pattern}."
      end

      pattern = Regexp.new(/^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$/)
      if @api_client.config.client_side_validation && !opts[:'master_timeout'].nil? && opts[:'master_timeout'] !~ pattern
        fail ArgumentError, "invalid value for 'opts[:\"master_timeout\"]' when calling DefaultApi.get_settings_index, must conform to the pattern #{pattern}."
      end

      pattern = Regexp.new(/^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$/)
      if @api_client.config.client_side_validation && !opts[:'cluster_manager_timeout'].nil? && opts[:'cluster_manager_timeout'] !~ pattern
        fail ArgumentError, "invalid value for 'opts[:\"cluster_manager_timeout\"]' when calling DefaultApi.get_settings_index, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/{index}/_settings'.sub('{' + 'index' + '}', CGI.escape(index.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'master_timeout'] = opts[:'master_timeout'] if !opts[:'master_timeout'].nil?
      query_params[:'cluster_manager_timeout'] = opts[:'cluster_manager_timeout'] if !opts[:'cluster_manager_timeout'].nil?
      query_params[:'allow_no_indices'] = opts[:'allow_no_indices'] if !opts[:'allow_no_indices'].nil?
      query_params[:'expand_wildcards'] = opts[:'expand_wildcards'] if !opts[:'expand_wildcards'].nil?
      query_params[:'flat_settings'] = opts[:'flat_settings'] if !opts[:'flat_settings'].nil?
      query_params[:'include_defaults'] = opts[:'include_defaults'] if !opts[:'include_defaults'].nil?
      query_params[:'ignore_unavailable'] = opts[:'ignore_unavailable'] if !opts[:'ignore_unavailable'].nil?
      query_params[:'local'] = opts[:'local'] if !opts[:'local'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['smithy.api.httpBasicAuth']

      new_options = opts.merge(
        :operation => :"DefaultApi.get_settings_index",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_settings_index\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # The get settings API operation returns all the settings in your index.
    # @param index [String] 
    # @param setting [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :master_timeout 
    # @option opts [String] :cluster_manager_timeout 
    # @option opts [Boolean] :allow_no_indices 
    # @option opts [ExpandWildcards] :expand_wildcards 
    # @option opts [Boolean] :flat_settings 
    # @option opts [String] :include_defaults 
    # @option opts [Boolean] :ignore_unavailable 
    # @option opts [Boolean] :local 
    # @return [Object]
    def get_settings_index_setting(index, setting, opts = {})
      data, _status_code, _headers = get_settings_index_setting_with_http_info(index, setting, opts)
      data
    end

    # The get settings API operation returns all the settings in your index.
    # @param index [String] 
    # @param setting [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :master_timeout 
    # @option opts [String] :cluster_manager_timeout 
    # @option opts [Boolean] :allow_no_indices 
    # @option opts [ExpandWildcards] :expand_wildcards 
    # @option opts [Boolean] :flat_settings 
    # @option opts [String] :include_defaults 
    # @option opts [Boolean] :ignore_unavailable 
    # @option opts [Boolean] :local 
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def get_settings_index_setting_with_http_info(index, setting, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_settings_index_setting ...'
      end
      # verify the required parameter 'index' is set
      if @api_client.config.client_side_validation && index.nil?
        fail ArgumentError, "Missing the required parameter 'index' when calling DefaultApi.get_settings_index_setting"
      end
      pattern = Regexp.new(/^[^+_\-\.][^\\, \/*?"<>| ,#\nA-Z]+$/)
      if @api_client.config.client_side_validation && index !~ pattern
        fail ArgumentError, "invalid value for 'index' when calling DefaultApi.get_settings_index_setting, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'setting' is set
      if @api_client.config.client_side_validation && setting.nil?
        fail ArgumentError, "Missing the required parameter 'setting' when calling DefaultApi.get_settings_index_setting"
      end
      pattern = Regexp.new(/^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$/)
      if @api_client.config.client_side_validation && !opts[:'master_timeout'].nil? && opts[:'master_timeout'] !~ pattern
        fail ArgumentError, "invalid value for 'opts[:\"master_timeout\"]' when calling DefaultApi.get_settings_index_setting, must conform to the pattern #{pattern}."
      end

      pattern = Regexp.new(/^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$/)
      if @api_client.config.client_side_validation && !opts[:'cluster_manager_timeout'].nil? && opts[:'cluster_manager_timeout'] !~ pattern
        fail ArgumentError, "invalid value for 'opts[:\"cluster_manager_timeout\"]' when calling DefaultApi.get_settings_index_setting, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/{index}/_settings/{setting}'.sub('{' + 'index' + '}', CGI.escape(index.to_s)).sub('{' + 'setting' + '}', CGI.escape(setting.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'master_timeout'] = opts[:'master_timeout'] if !opts[:'master_timeout'].nil?
      query_params[:'cluster_manager_timeout'] = opts[:'cluster_manager_timeout'] if !opts[:'cluster_manager_timeout'].nil?
      query_params[:'allow_no_indices'] = opts[:'allow_no_indices'] if !opts[:'allow_no_indices'].nil?
      query_params[:'expand_wildcards'] = opts[:'expand_wildcards'] if !opts[:'expand_wildcards'].nil?
      query_params[:'flat_settings'] = opts[:'flat_settings'] if !opts[:'flat_settings'].nil?
      query_params[:'include_defaults'] = opts[:'include_defaults'] if !opts[:'include_defaults'].nil?
      query_params[:'ignore_unavailable'] = opts[:'ignore_unavailable'] if !opts[:'ignore_unavailable'].nil?
      query_params[:'local'] = opts[:'local'] if !opts[:'local'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['smithy.api.httpBasicAuth']

      new_options = opts.merge(
        :operation => :"DefaultApi.get_settings_index_setting",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_settings_index_setting\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Adds or removes index aliases.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :master_timeout 
    # @option opts [String] :cluster_manager_timeout 
    # @option opts [String] :timeout 
    # @option opts [PostAliasesRequestContent] :post_aliases_request_content 
    # @return [PostAliasesResponseContent]
    def post_aliases(opts = {})
      data, _status_code, _headers = post_aliases_with_http_info(opts)
      data
    end

    # Adds or removes index aliases.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :master_timeout 
    # @option opts [String] :cluster_manager_timeout 
    # @option opts [String] :timeout 
    # @option opts [PostAliasesRequestContent] :post_aliases_request_content 
    # @return [Array<(PostAliasesResponseContent, Integer, Hash)>] PostAliasesResponseContent data, response status code and response headers
    def post_aliases_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.post_aliases ...'
      end
      pattern = Regexp.new(/^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$/)
      if @api_client.config.client_side_validation && !opts[:'master_timeout'].nil? && opts[:'master_timeout'] !~ pattern
        fail ArgumentError, "invalid value for 'opts[:\"master_timeout\"]' when calling DefaultApi.post_aliases, must conform to the pattern #{pattern}."
      end

      pattern = Regexp.new(/^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$/)
      if @api_client.config.client_side_validation && !opts[:'cluster_manager_timeout'].nil? && opts[:'cluster_manager_timeout'] !~ pattern
        fail ArgumentError, "invalid value for 'opts[:\"cluster_manager_timeout\"]' when calling DefaultApi.post_aliases, must conform to the pattern #{pattern}."
      end

      pattern = Regexp.new(/^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$/)
      if @api_client.config.client_side_validation && !opts[:'timeout'].nil? && opts[:'timeout'] !~ pattern
        fail ArgumentError, "invalid value for 'opts[:\"timeout\"]' when calling DefaultApi.post_aliases, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/_aliases'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'master_timeout'] = opts[:'master_timeout'] if !opts[:'master_timeout'].nil?
      query_params[:'cluster_manager_timeout'] = opts[:'cluster_manager_timeout'] if !opts[:'cluster_manager_timeout'].nil?
      query_params[:'timeout'] = opts[:'timeout'] if !opts[:'timeout'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'post_aliases_request_content'])

      # return_type
      return_type = opts[:debug_return_type] || 'PostAliasesResponseContent'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['smithy.api.httpBasicAuth']

      new_options = opts.merge(
        :operation => :"DefaultApi.post_aliases",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#post_aliases\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns results matching a query.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :allow_no_indices 
    # @option opts [Boolean] :allow_partial_search_results 
    # @option opts [String] :analyzer 
    # @option opts [Boolean] :analyze_wildcard 
    # @option opts [Integer] :batched_reduce_size 
    # @option opts [Boolean] :ccs_minimize_roundtrips 
    # @option opts [DefaultOperator] :default_operator 
    # @option opts [String] :df 
    # @option opts [String] :docvalue_fields 
    # @option opts [ExpandWildcards] :expand_wildcards 
    # @option opts [Boolean] :explain 
    # @option opts [Integer] :from 
    # @option opts [Boolean] :ignore_throttled 
    # @option opts [Boolean] :ignore_unavailable 
    # @option opts [Boolean] :lenient 
    # @option opts [Integer] :max_concurrent_shard_requests 
    # @option opts [Integer] :pre_filter_shard_size 
    # @option opts [String] :preference 
    # @option opts [String] :q 
    # @option opts [Boolean] :request_cache 
    # @option opts [Boolean] :rest_total_hits_as_int 
    # @option opts [String] :routing 
    # @option opts [String] :scroll 
    # @option opts [SearchType] :search_type 
    # @option opts [Boolean] :seq_no_primary_term 
    # @option opts [Integer] :size 
    # @option opts [Array<String>] :sort 
    # @option opts [String] :source 
    # @option opts [Array<String>] :source_excludes 
    # @option opts [Array<String>] :source_includes 
    # @option opts [String] :stats 
    # @option opts [Boolean] :stored_fields 
    # @option opts [String] :suggest_field 
    # @option opts [SuggestMode] :suggest_mode 
    # @option opts [Integer] :suggest_size 
    # @option opts [String] :suggest_text 
    # @option opts [Integer] :terminate_after 
    # @option opts [String] :timeout 
    # @option opts [Boolean] :track_scores 
    # @option opts [Integer] :track_total_hits 
    # @option opts [Boolean] :typed_keys 
    # @option opts [Boolean] :version 
    # @option opts [PostSearchRequestContent] :post_search_request_content 
    # @return [PostSearchResponseContent]
    def post_search(opts = {})
      data, _status_code, _headers = post_search_with_http_info(opts)
      data
    end

    # Returns results matching a query.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :allow_no_indices 
    # @option opts [Boolean] :allow_partial_search_results 
    # @option opts [String] :analyzer 
    # @option opts [Boolean] :analyze_wildcard 
    # @option opts [Integer] :batched_reduce_size 
    # @option opts [Boolean] :ccs_minimize_roundtrips 
    # @option opts [DefaultOperator] :default_operator 
    # @option opts [String] :df 
    # @option opts [String] :docvalue_fields 
    # @option opts [ExpandWildcards] :expand_wildcards 
    # @option opts [Boolean] :explain 
    # @option opts [Integer] :from 
    # @option opts [Boolean] :ignore_throttled 
    # @option opts [Boolean] :ignore_unavailable 
    # @option opts [Boolean] :lenient 
    # @option opts [Integer] :max_concurrent_shard_requests 
    # @option opts [Integer] :pre_filter_shard_size 
    # @option opts [String] :preference 
    # @option opts [String] :q 
    # @option opts [Boolean] :request_cache 
    # @option opts [Boolean] :rest_total_hits_as_int 
    # @option opts [String] :routing 
    # @option opts [String] :scroll 
    # @option opts [SearchType] :search_type 
    # @option opts [Boolean] :seq_no_primary_term 
    # @option opts [Integer] :size 
    # @option opts [Array<String>] :sort 
    # @option opts [String] :source 
    # @option opts [Array<String>] :source_excludes 
    # @option opts [Array<String>] :source_includes 
    # @option opts [String] :stats 
    # @option opts [Boolean] :stored_fields 
    # @option opts [String] :suggest_field 
    # @option opts [SuggestMode] :suggest_mode 
    # @option opts [Integer] :suggest_size 
    # @option opts [String] :suggest_text 
    # @option opts [Integer] :terminate_after 
    # @option opts [String] :timeout 
    # @option opts [Boolean] :track_scores 
    # @option opts [Integer] :track_total_hits 
    # @option opts [Boolean] :typed_keys 
    # @option opts [Boolean] :version 
    # @option opts [PostSearchRequestContent] :post_search_request_content 
    # @return [Array<(PostSearchResponseContent, Integer, Hash)>] PostSearchResponseContent data, response status code and response headers
    def post_search_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.post_search ...'
      end
      pattern = Regexp.new(/^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$/)
      if @api_client.config.client_side_validation && !opts[:'scroll'].nil? && opts[:'scroll'] !~ pattern
        fail ArgumentError, "invalid value for 'opts[:\"scroll\"]' when calling DefaultApi.post_search, must conform to the pattern #{pattern}."
      end

      pattern = Regexp.new(/^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$/)
      if @api_client.config.client_side_validation && !opts[:'timeout'].nil? && opts[:'timeout'] !~ pattern
        fail ArgumentError, "invalid value for 'opts[:\"timeout\"]' when calling DefaultApi.post_search, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/_search'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'allow_no_indices'] = opts[:'allow_no_indices'] if !opts[:'allow_no_indices'].nil?
      query_params[:'allow_partial_search_results'] = opts[:'allow_partial_search_results'] if !opts[:'allow_partial_search_results'].nil?
      query_params[:'analyzer'] = opts[:'analyzer'] if !opts[:'analyzer'].nil?
      query_params[:'analyze_wildcard'] = opts[:'analyze_wildcard'] if !opts[:'analyze_wildcard'].nil?
      query_params[:'batched_reduce_size'] = opts[:'batched_reduce_size'] if !opts[:'batched_reduce_size'].nil?
      query_params[:'ccs_minimize_roundtrips'] = opts[:'ccs_minimize_roundtrips'] if !opts[:'ccs_minimize_roundtrips'].nil?
      query_params[:'default_operator'] = opts[:'default_operator'] if !opts[:'default_operator'].nil?
      query_params[:'df'] = opts[:'df'] if !opts[:'df'].nil?
      query_params[:'docvalue_fields'] = opts[:'docvalue_fields'] if !opts[:'docvalue_fields'].nil?
      query_params[:'expand_wildcards'] = opts[:'expand_wildcards'] if !opts[:'expand_wildcards'].nil?
      query_params[:'explain'] = opts[:'explain'] if !opts[:'explain'].nil?
      query_params[:'from'] = opts[:'from'] if !opts[:'from'].nil?
      query_params[:'ignore_throttled'] = opts[:'ignore_throttled'] if !opts[:'ignore_throttled'].nil?
      query_params[:'ignore_unavailable'] = opts[:'ignore_unavailable'] if !opts[:'ignore_unavailable'].nil?
      query_params[:'lenient'] = opts[:'lenient'] if !opts[:'lenient'].nil?
      query_params[:'max_concurrent_shard_requests'] = opts[:'max_concurrent_shard_requests'] if !opts[:'max_concurrent_shard_requests'].nil?
      query_params[:'pre_filter_shard_size'] = opts[:'pre_filter_shard_size'] if !opts[:'pre_filter_shard_size'].nil?
      query_params[:'preference'] = opts[:'preference'] if !opts[:'preference'].nil?
      query_params[:'q'] = opts[:'q'] if !opts[:'q'].nil?
      query_params[:'request_cache'] = opts[:'request_cache'] if !opts[:'request_cache'].nil?
      query_params[:'rest_total_hits_as_int'] = opts[:'rest_total_hits_as_int'] if !opts[:'rest_total_hits_as_int'].nil?
      query_params[:'routing'] = opts[:'routing'] if !opts[:'routing'].nil?
      query_params[:'scroll'] = opts[:'scroll'] if !opts[:'scroll'].nil?
      query_params[:'search_type'] = opts[:'search_type'] if !opts[:'search_type'].nil?
      query_params[:'seq_no_primary_term'] = opts[:'seq_no_primary_term'] if !opts[:'seq_no_primary_term'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :multi) if !opts[:'sort'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?
      query_params[:'source_excludes'] = @api_client.build_collection_param(opts[:'source_excludes'], :multi) if !opts[:'source_excludes'].nil?
      query_params[:'source_includes'] = @api_client.build_collection_param(opts[:'source_includes'], :multi) if !opts[:'source_includes'].nil?
      query_params[:'stats'] = opts[:'stats'] if !opts[:'stats'].nil?
      query_params[:'stored_fields'] = opts[:'stored_fields'] if !opts[:'stored_fields'].nil?
      query_params[:'suggest_field'] = opts[:'suggest_field'] if !opts[:'suggest_field'].nil?
      query_params[:'suggest_mode'] = opts[:'suggest_mode'] if !opts[:'suggest_mode'].nil?
      query_params[:'suggest_size'] = opts[:'suggest_size'] if !opts[:'suggest_size'].nil?
      query_params[:'suggest_text'] = opts[:'suggest_text'] if !opts[:'suggest_text'].nil?
      query_params[:'terminate_after'] = opts[:'terminate_after'] if !opts[:'terminate_after'].nil?
      query_params[:'timeout'] = opts[:'timeout'] if !opts[:'timeout'].nil?
      query_params[:'track_scores'] = opts[:'track_scores'] if !opts[:'track_scores'].nil?
      query_params[:'track_total_hits'] = opts[:'track_total_hits'] if !opts[:'track_total_hits'].nil?
      query_params[:'typed_keys'] = opts[:'typed_keys'] if !opts[:'typed_keys'].nil?
      query_params[:'version'] = opts[:'version'] if !opts[:'version'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'post_search_request_content'])

      # return_type
      return_type = opts[:debug_return_type] || 'PostSearchResponseContent'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['smithy.api.httpBasicAuth']

      new_options = opts.merge(
        :operation => :"DefaultApi.post_search",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#post_search\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns results matching a query.
    # @param index [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :allow_no_indices 
    # @option opts [Boolean] :allow_partial_search_results 
    # @option opts [String] :analyzer 
    # @option opts [Boolean] :analyze_wildcard 
    # @option opts [Integer] :batched_reduce_size 
    # @option opts [Boolean] :ccs_minimize_roundtrips 
    # @option opts [DefaultOperator] :default_operator 
    # @option opts [String] :df 
    # @option opts [String] :docvalue_fields 
    # @option opts [ExpandWildcards] :expand_wildcards 
    # @option opts [Boolean] :explain 
    # @option opts [Integer] :from 
    # @option opts [Boolean] :ignore_throttled 
    # @option opts [Boolean] :ignore_unavailable 
    # @option opts [Boolean] :lenient 
    # @option opts [Integer] :max_concurrent_shard_requests 
    # @option opts [Integer] :pre_filter_shard_size 
    # @option opts [String] :preference 
    # @option opts [String] :q 
    # @option opts [Boolean] :request_cache 
    # @option opts [Boolean] :rest_total_hits_as_int 
    # @option opts [String] :routing 
    # @option opts [String] :scroll 
    # @option opts [SearchType] :search_type 
    # @option opts [Boolean] :seq_no_primary_term 
    # @option opts [Integer] :size 
    # @option opts [Array<String>] :sort 
    # @option opts [String] :source 
    # @option opts [Array<String>] :source_excludes 
    # @option opts [Array<String>] :source_includes 
    # @option opts [String] :stats 
    # @option opts [Boolean] :stored_fields 
    # @option opts [String] :suggest_field 
    # @option opts [SuggestMode] :suggest_mode 
    # @option opts [Integer] :suggest_size 
    # @option opts [String] :suggest_text 
    # @option opts [Integer] :terminate_after 
    # @option opts [String] :timeout 
    # @option opts [Boolean] :track_scores 
    # @option opts [Integer] :track_total_hits 
    # @option opts [Boolean] :typed_keys 
    # @option opts [Boolean] :version 
    # @option opts [PostSearchWithIndexRequestContent] :post_search_with_index_request_content 
    # @return [PostSearchWithIndexResponseContent]
    def post_search_with_index(index, opts = {})
      data, _status_code, _headers = post_search_with_index_with_http_info(index, opts)
      data
    end

    # Returns results matching a query.
    # @param index [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :allow_no_indices 
    # @option opts [Boolean] :allow_partial_search_results 
    # @option opts [String] :analyzer 
    # @option opts [Boolean] :analyze_wildcard 
    # @option opts [Integer] :batched_reduce_size 
    # @option opts [Boolean] :ccs_minimize_roundtrips 
    # @option opts [DefaultOperator] :default_operator 
    # @option opts [String] :df 
    # @option opts [String] :docvalue_fields 
    # @option opts [ExpandWildcards] :expand_wildcards 
    # @option opts [Boolean] :explain 
    # @option opts [Integer] :from 
    # @option opts [Boolean] :ignore_throttled 
    # @option opts [Boolean] :ignore_unavailable 
    # @option opts [Boolean] :lenient 
    # @option opts [Integer] :max_concurrent_shard_requests 
    # @option opts [Integer] :pre_filter_shard_size 
    # @option opts [String] :preference 
    # @option opts [String] :q 
    # @option opts [Boolean] :request_cache 
    # @option opts [Boolean] :rest_total_hits_as_int 
    # @option opts [String] :routing 
    # @option opts [String] :scroll 
    # @option opts [SearchType] :search_type 
    # @option opts [Boolean] :seq_no_primary_term 
    # @option opts [Integer] :size 
    # @option opts [Array<String>] :sort 
    # @option opts [String] :source 
    # @option opts [Array<String>] :source_excludes 
    # @option opts [Array<String>] :source_includes 
    # @option opts [String] :stats 
    # @option opts [Boolean] :stored_fields 
    # @option opts [String] :suggest_field 
    # @option opts [SuggestMode] :suggest_mode 
    # @option opts [Integer] :suggest_size 
    # @option opts [String] :suggest_text 
    # @option opts [Integer] :terminate_after 
    # @option opts [String] :timeout 
    # @option opts [Boolean] :track_scores 
    # @option opts [Integer] :track_total_hits 
    # @option opts [Boolean] :typed_keys 
    # @option opts [Boolean] :version 
    # @option opts [PostSearchWithIndexRequestContent] :post_search_with_index_request_content 
    # @return [Array<(PostSearchWithIndexResponseContent, Integer, Hash)>] PostSearchWithIndexResponseContent data, response status code and response headers
    def post_search_with_index_with_http_info(index, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.post_search_with_index ...'
      end
      # verify the required parameter 'index' is set
      if @api_client.config.client_side_validation && index.nil?
        fail ArgumentError, "Missing the required parameter 'index' when calling DefaultApi.post_search_with_index"
      end
      pattern = Regexp.new(/^[^+_\-\.][^\\, \/*?"<>| ,#\nA-Z]+$/)
      if @api_client.config.client_side_validation && index !~ pattern
        fail ArgumentError, "invalid value for 'index' when calling DefaultApi.post_search_with_index, must conform to the pattern #{pattern}."
      end

      pattern = Regexp.new(/^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$/)
      if @api_client.config.client_side_validation && !opts[:'scroll'].nil? && opts[:'scroll'] !~ pattern
        fail ArgumentError, "invalid value for 'opts[:\"scroll\"]' when calling DefaultApi.post_search_with_index, must conform to the pattern #{pattern}."
      end

      pattern = Regexp.new(/^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$/)
      if @api_client.config.client_side_validation && !opts[:'timeout'].nil? && opts[:'timeout'] !~ pattern
        fail ArgumentError, "invalid value for 'opts[:\"timeout\"]' when calling DefaultApi.post_search_with_index, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/{index}/_search'.sub('{' + 'index' + '}', CGI.escape(index.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'allow_no_indices'] = opts[:'allow_no_indices'] if !opts[:'allow_no_indices'].nil?
      query_params[:'allow_partial_search_results'] = opts[:'allow_partial_search_results'] if !opts[:'allow_partial_search_results'].nil?
      query_params[:'analyzer'] = opts[:'analyzer'] if !opts[:'analyzer'].nil?
      query_params[:'analyze_wildcard'] = opts[:'analyze_wildcard'] if !opts[:'analyze_wildcard'].nil?
      query_params[:'batched_reduce_size'] = opts[:'batched_reduce_size'] if !opts[:'batched_reduce_size'].nil?
      query_params[:'ccs_minimize_roundtrips'] = opts[:'ccs_minimize_roundtrips'] if !opts[:'ccs_minimize_roundtrips'].nil?
      query_params[:'default_operator'] = opts[:'default_operator'] if !opts[:'default_operator'].nil?
      query_params[:'df'] = opts[:'df'] if !opts[:'df'].nil?
      query_params[:'docvalue_fields'] = opts[:'docvalue_fields'] if !opts[:'docvalue_fields'].nil?
      query_params[:'expand_wildcards'] = opts[:'expand_wildcards'] if !opts[:'expand_wildcards'].nil?
      query_params[:'explain'] = opts[:'explain'] if !opts[:'explain'].nil?
      query_params[:'from'] = opts[:'from'] if !opts[:'from'].nil?
      query_params[:'ignore_throttled'] = opts[:'ignore_throttled'] if !opts[:'ignore_throttled'].nil?
      query_params[:'ignore_unavailable'] = opts[:'ignore_unavailable'] if !opts[:'ignore_unavailable'].nil?
      query_params[:'lenient'] = opts[:'lenient'] if !opts[:'lenient'].nil?
      query_params[:'max_concurrent_shard_requests'] = opts[:'max_concurrent_shard_requests'] if !opts[:'max_concurrent_shard_requests'].nil?
      query_params[:'pre_filter_shard_size'] = opts[:'pre_filter_shard_size'] if !opts[:'pre_filter_shard_size'].nil?
      query_params[:'preference'] = opts[:'preference'] if !opts[:'preference'].nil?
      query_params[:'q'] = opts[:'q'] if !opts[:'q'].nil?
      query_params[:'request_cache'] = opts[:'request_cache'] if !opts[:'request_cache'].nil?
      query_params[:'rest_total_hits_as_int'] = opts[:'rest_total_hits_as_int'] if !opts[:'rest_total_hits_as_int'].nil?
      query_params[:'routing'] = opts[:'routing'] if !opts[:'routing'].nil?
      query_params[:'scroll'] = opts[:'scroll'] if !opts[:'scroll'].nil?
      query_params[:'search_type'] = opts[:'search_type'] if !opts[:'search_type'].nil?
      query_params[:'seq_no_primary_term'] = opts[:'seq_no_primary_term'] if !opts[:'seq_no_primary_term'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :multi) if !opts[:'sort'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?
      query_params[:'source_excludes'] = @api_client.build_collection_param(opts[:'source_excludes'], :multi) if !opts[:'source_excludes'].nil?
      query_params[:'source_includes'] = @api_client.build_collection_param(opts[:'source_includes'], :multi) if !opts[:'source_includes'].nil?
      query_params[:'stats'] = opts[:'stats'] if !opts[:'stats'].nil?
      query_params[:'stored_fields'] = opts[:'stored_fields'] if !opts[:'stored_fields'].nil?
      query_params[:'suggest_field'] = opts[:'suggest_field'] if !opts[:'suggest_field'].nil?
      query_params[:'suggest_mode'] = opts[:'suggest_mode'] if !opts[:'suggest_mode'].nil?
      query_params[:'suggest_size'] = opts[:'suggest_size'] if !opts[:'suggest_size'].nil?
      query_params[:'suggest_text'] = opts[:'suggest_text'] if !opts[:'suggest_text'].nil?
      query_params[:'terminate_after'] = opts[:'terminate_after'] if !opts[:'terminate_after'].nil?
      query_params[:'timeout'] = opts[:'timeout'] if !opts[:'timeout'].nil?
      query_params[:'track_scores'] = opts[:'track_scores'] if !opts[:'track_scores'].nil?
      query_params[:'track_total_hits'] = opts[:'track_total_hits'] if !opts[:'track_total_hits'].nil?
      query_params[:'typed_keys'] = opts[:'typed_keys'] if !opts[:'typed_keys'].nil?
      query_params[:'version'] = opts[:'version'] if !opts[:'version'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'post_search_with_index_request_content'])

      # return_type
      return_type = opts[:debug_return_type] || 'PostSearchWithIndexResponseContent'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['smithy.api.httpBasicAuth']

      new_options = opts.merge(
        :operation => :"DefaultApi.post_search_with_index",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#post_search_with_index\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Creates index mappings.
    # @param index [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :master_timeout 
    # @option opts [String] :cluster_manager_timeout 
    # @option opts [Boolean] :include_type_name 
    # @option opts [String] :wait_for_active_shards 
    # @option opts [String] :timeout 
    # @option opts [PutCreateIndexRequestContent] :put_create_index_request_content 
    # @return [PutCreateIndexResponseContent]
    def put_create_index(index, opts = {})
      data, _status_code, _headers = put_create_index_with_http_info(index, opts)
      data
    end

    # Creates index mappings.
    # @param index [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :master_timeout 
    # @option opts [String] :cluster_manager_timeout 
    # @option opts [Boolean] :include_type_name 
    # @option opts [String] :wait_for_active_shards 
    # @option opts [String] :timeout 
    # @option opts [PutCreateIndexRequestContent] :put_create_index_request_content 
    # @return [Array<(PutCreateIndexResponseContent, Integer, Hash)>] PutCreateIndexResponseContent data, response status code and response headers
    def put_create_index_with_http_info(index, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.put_create_index ...'
      end
      # verify the required parameter 'index' is set
      if @api_client.config.client_side_validation && index.nil?
        fail ArgumentError, "Missing the required parameter 'index' when calling DefaultApi.put_create_index"
      end
      pattern = Regexp.new(/^[^+_\-\.][^\\, \/*?"<>| ,#\nA-Z]+$/)
      if @api_client.config.client_side_validation && index !~ pattern
        fail ArgumentError, "invalid value for 'index' when calling DefaultApi.put_create_index, must conform to the pattern #{pattern}."
      end

      pattern = Regexp.new(/^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$/)
      if @api_client.config.client_side_validation && !opts[:'master_timeout'].nil? && opts[:'master_timeout'] !~ pattern
        fail ArgumentError, "invalid value for 'opts[:\"master_timeout\"]' when calling DefaultApi.put_create_index, must conform to the pattern #{pattern}."
      end

      pattern = Regexp.new(/^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$/)
      if @api_client.config.client_side_validation && !opts[:'cluster_manager_timeout'].nil? && opts[:'cluster_manager_timeout'] !~ pattern
        fail ArgumentError, "invalid value for 'opts[:\"cluster_manager_timeout\"]' when calling DefaultApi.put_create_index, must conform to the pattern #{pattern}."
      end

      pattern = Regexp.new(/^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$/)
      if @api_client.config.client_side_validation && !opts[:'timeout'].nil? && opts[:'timeout'] !~ pattern
        fail ArgumentError, "invalid value for 'opts[:\"timeout\"]' when calling DefaultApi.put_create_index, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/{index}'.sub('{' + 'index' + '}', CGI.escape(index.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'master_timeout'] = opts[:'master_timeout'] if !opts[:'master_timeout'].nil?
      query_params[:'cluster_manager_timeout'] = opts[:'cluster_manager_timeout'] if !opts[:'cluster_manager_timeout'].nil?
      query_params[:'include_type_name'] = opts[:'include_type_name'] if !opts[:'include_type_name'].nil?
      query_params[:'wait_for_active_shards'] = opts[:'wait_for_active_shards'] if !opts[:'wait_for_active_shards'].nil?
      query_params[:'timeout'] = opts[:'timeout'] if !opts[:'timeout'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'put_create_index_request_content'])

      # return_type
      return_type = opts[:debug_return_type] || 'PutCreateIndexResponseContent'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['smithy.api.httpBasicAuth']

      new_options = opts.merge(
        :operation => :"DefaultApi.put_create_index",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#put_create_index\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # The put mapping API operation lets you add new mappings and fields to an index.
    # @param index [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :master_timeout 
    # @option opts [String] :cluster_manager_timeout 
    # @option opts [Boolean] :allow_no_indices 
    # @option opts [ExpandWildcards] :expand_wildcards 
    # @option opts [Boolean] :ignore_unavailable 
    # @option opts [Boolean] :include_type_name 
    # @option opts [String] :timeout 
    # @option opts [Boolean] :write_index_only 
    # @option opts [PutIndexMappingWithIndexRequestContent] :put_index_mapping_with_index_request_content 
    # @return [PutIndexMappingWithIndexResponseContent]
    def put_index_mapping_with_index(index, opts = {})
      data, _status_code, _headers = put_index_mapping_with_index_with_http_info(index, opts)
      data
    end

    # The put mapping API operation lets you add new mappings and fields to an index.
    # @param index [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :master_timeout 
    # @option opts [String] :cluster_manager_timeout 
    # @option opts [Boolean] :allow_no_indices 
    # @option opts [ExpandWildcards] :expand_wildcards 
    # @option opts [Boolean] :ignore_unavailable 
    # @option opts [Boolean] :include_type_name 
    # @option opts [String] :timeout 
    # @option opts [Boolean] :write_index_only 
    # @option opts [PutIndexMappingWithIndexRequestContent] :put_index_mapping_with_index_request_content 
    # @return [Array<(PutIndexMappingWithIndexResponseContent, Integer, Hash)>] PutIndexMappingWithIndexResponseContent data, response status code and response headers
    def put_index_mapping_with_index_with_http_info(index, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.put_index_mapping_with_index ...'
      end
      # verify the required parameter 'index' is set
      if @api_client.config.client_side_validation && index.nil?
        fail ArgumentError, "Missing the required parameter 'index' when calling DefaultApi.put_index_mapping_with_index"
      end
      pattern = Regexp.new(/^[^+_\-\.][^\\, \/*?"<>| ,#\nA-Z]+$/)
      if @api_client.config.client_side_validation && index !~ pattern
        fail ArgumentError, "invalid value for 'index' when calling DefaultApi.put_index_mapping_with_index, must conform to the pattern #{pattern}."
      end

      pattern = Regexp.new(/^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$/)
      if @api_client.config.client_side_validation && !opts[:'master_timeout'].nil? && opts[:'master_timeout'] !~ pattern
        fail ArgumentError, "invalid value for 'opts[:\"master_timeout\"]' when calling DefaultApi.put_index_mapping_with_index, must conform to the pattern #{pattern}."
      end

      pattern = Regexp.new(/^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$/)
      if @api_client.config.client_side_validation && !opts[:'cluster_manager_timeout'].nil? && opts[:'cluster_manager_timeout'] !~ pattern
        fail ArgumentError, "invalid value for 'opts[:\"cluster_manager_timeout\"]' when calling DefaultApi.put_index_mapping_with_index, must conform to the pattern #{pattern}."
      end

      pattern = Regexp.new(/^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$/)
      if @api_client.config.client_side_validation && !opts[:'timeout'].nil? && opts[:'timeout'] !~ pattern
        fail ArgumentError, "invalid value for 'opts[:\"timeout\"]' when calling DefaultApi.put_index_mapping_with_index, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/{index}/_mapping'.sub('{' + 'index' + '}', CGI.escape(index.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'master_timeout'] = opts[:'master_timeout'] if !opts[:'master_timeout'].nil?
      query_params[:'cluster_manager_timeout'] = opts[:'cluster_manager_timeout'] if !opts[:'cluster_manager_timeout'].nil?
      query_params[:'allow_no_indices'] = opts[:'allow_no_indices'] if !opts[:'allow_no_indices'].nil?
      query_params[:'expand_wildcards'] = opts[:'expand_wildcards'] if !opts[:'expand_wildcards'].nil?
      query_params[:'ignore_unavailable'] = opts[:'ignore_unavailable'] if !opts[:'ignore_unavailable'].nil?
      query_params[:'include_type_name'] = opts[:'include_type_name'] if !opts[:'include_type_name'].nil?
      query_params[:'timeout'] = opts[:'timeout'] if !opts[:'timeout'].nil?
      query_params[:'write_index_only'] = opts[:'write_index_only'] if !opts[:'write_index_only'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'put_index_mapping_with_index_request_content'])

      # return_type
      return_type = opts[:debug_return_type] || 'PutIndexMappingWithIndexResponseContent'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['smithy.api.httpBasicAuth']

      new_options = opts.merge(
        :operation => :"DefaultApi.put_index_mapping_with_index",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#put_index_mapping_with_index\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Updates the cluster settings.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :master_timeout 
    # @option opts [String] :cluster_manager_timeout 
    # @option opts [Boolean] :flat_settings 
    # @option opts [String] :timeout 
    # @option opts [PutUpdateClusterSettingsRequestContent] :put_update_cluster_settings_request_content 
    # @return [PutUpdateClusterSettingsResponseContent]
    def put_update_cluster_settings(opts = {})
      data, _status_code, _headers = put_update_cluster_settings_with_http_info(opts)
      data
    end

    # Updates the cluster settings.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :master_timeout 
    # @option opts [String] :cluster_manager_timeout 
    # @option opts [Boolean] :flat_settings 
    # @option opts [String] :timeout 
    # @option opts [PutUpdateClusterSettingsRequestContent] :put_update_cluster_settings_request_content 
    # @return [Array<(PutUpdateClusterSettingsResponseContent, Integer, Hash)>] PutUpdateClusterSettingsResponseContent data, response status code and response headers
    def put_update_cluster_settings_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.put_update_cluster_settings ...'
      end
      pattern = Regexp.new(/^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$/)
      if @api_client.config.client_side_validation && !opts[:'master_timeout'].nil? && opts[:'master_timeout'] !~ pattern
        fail ArgumentError, "invalid value for 'opts[:\"master_timeout\"]' when calling DefaultApi.put_update_cluster_settings, must conform to the pattern #{pattern}."
      end

      pattern = Regexp.new(/^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$/)
      if @api_client.config.client_side_validation && !opts[:'cluster_manager_timeout'].nil? && opts[:'cluster_manager_timeout'] !~ pattern
        fail ArgumentError, "invalid value for 'opts[:\"cluster_manager_timeout\"]' when calling DefaultApi.put_update_cluster_settings, must conform to the pattern #{pattern}."
      end

      pattern = Regexp.new(/^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$/)
      if @api_client.config.client_side_validation && !opts[:'timeout'].nil? && opts[:'timeout'] !~ pattern
        fail ArgumentError, "invalid value for 'opts[:\"timeout\"]' when calling DefaultApi.put_update_cluster_settings, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/_cluster/settings'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'master_timeout'] = opts[:'master_timeout'] if !opts[:'master_timeout'].nil?
      query_params[:'cluster_manager_timeout'] = opts[:'cluster_manager_timeout'] if !opts[:'cluster_manager_timeout'].nil?
      query_params[:'flat_settings'] = opts[:'flat_settings'] if !opts[:'flat_settings'].nil?
      query_params[:'timeout'] = opts[:'timeout'] if !opts[:'timeout'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'put_update_cluster_settings_request_content'])

      # return_type
      return_type = opts[:debug_return_type] || 'PutUpdateClusterSettingsResponseContent'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['smithy.api.httpBasicAuth']

      new_options = opts.merge(
        :operation => :"DefaultApi.put_update_cluster_settings",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#put_update_cluster_settings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
