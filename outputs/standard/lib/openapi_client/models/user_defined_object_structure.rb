=begin
#OpenSearch

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 2021-11-23

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.1

=end

require 'date'
require 'time'

module OpenapiClient
  class UserDefinedObjectStructure
    attr_accessor :bool

    attr_accessor :boosting

    attr_accessor :combined_fields

    attr_accessor :constant_score

    attr_accessor :dis_max

    attr_accessor :distance_feature

    attr_accessor :exists

    attr_accessor :function_score

    attr_accessor :fuzzy

    attr_accessor :geo_bounding_box

    attr_accessor :geo_distance

    attr_accessor :geo_polygon

    attr_accessor :geo_shape

    attr_accessor :has_child

    attr_accessor :has_parent

    attr_accessor :ids

    attr_accessor :intervals

    attr_accessor :knn

    attr_accessor :match

    attr_accessor :match_all

    attr_accessor :match_bool_prefix

    attr_accessor :match_none

    attr_accessor :match_phrase

    attr_accessor :match_phrase_prefix

    attr_accessor :more_like_this

    attr_accessor :multi_match

    attr_accessor :nested

    attr_accessor :parent_id

    attr_accessor :percolate

    attr_accessor :pinned

    attr_accessor :prefix

    attr_accessor :query_string

    attr_accessor :range

    attr_accessor :rank_feature

    attr_accessor :regexp

    attr_accessor :script

    attr_accessor :script_score

    attr_accessor :shape

    attr_accessor :simple_query_string

    attr_accessor :span_containing

    attr_accessor :field_masking_span

    attr_accessor :span_first

    attr_accessor :span_multi

    attr_accessor :span_near

    attr_accessor :span_not

    attr_accessor :span_or

    attr_accessor :span_term

    attr_accessor :span_within

    attr_accessor :term

    attr_accessor :terms

    attr_accessor :terms_set

    attr_accessor :wildcard

    attr_accessor :wrapper

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'bool' => :'bool',
        :'boosting' => :'boosting',
        :'combined_fields' => :'combined_fields',
        :'constant_score' => :'constant_score',
        :'dis_max' => :'dis_max',
        :'distance_feature' => :'distance_feature',
        :'exists' => :'exists',
        :'function_score' => :'function_score',
        :'fuzzy' => :'fuzzy',
        :'geo_bounding_box' => :'geo_bounding_box',
        :'geo_distance' => :'geo_distance',
        :'geo_polygon' => :'geo_polygon',
        :'geo_shape' => :'geo_shape',
        :'has_child' => :'has_child',
        :'has_parent' => :'has_parent',
        :'ids' => :'ids',
        :'intervals' => :'intervals',
        :'knn' => :'knn',
        :'match' => :'match',
        :'match_all' => :'match_all',
        :'match_bool_prefix' => :'match_bool_prefix',
        :'match_none' => :'match_none',
        :'match_phrase' => :'match_phrase',
        :'match_phrase_prefix' => :'match_phrase_prefix',
        :'more_like_this' => :'more_like_this',
        :'multi_match' => :'multi_match',
        :'nested' => :'nested',
        :'parent_id' => :'parent_id',
        :'percolate' => :'percolate',
        :'pinned' => :'pinned',
        :'prefix' => :'prefix',
        :'query_string' => :'query_string',
        :'range' => :'range',
        :'rank_feature' => :'rank_feature',
        :'regexp' => :'regexp',
        :'script' => :'script',
        :'script_score' => :'script_score',
        :'shape' => :'shape',
        :'simple_query_string' => :'simple_query_string',
        :'span_containing' => :'span_containing',
        :'field_masking_span' => :'field_masking_span',
        :'span_first' => :'span_first',
        :'span_multi' => :'span_multi',
        :'span_near' => :'span_near',
        :'span_not' => :'span_not',
        :'span_or' => :'span_or',
        :'span_term' => :'span_term',
        :'span_within' => :'span_within',
        :'term' => :'term',
        :'terms' => :'terms',
        :'terms_set' => :'terms_set',
        :'wildcard' => :'wildcard',
        :'wrapper' => :'wrapper'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'bool' => :'Object',
        :'boosting' => :'Object',
        :'combined_fields' => :'Object',
        :'constant_score' => :'Object',
        :'dis_max' => :'Object',
        :'distance_feature' => :'Object',
        :'exists' => :'Object',
        :'function_score' => :'Object',
        :'fuzzy' => :'Hash<String, Object>',
        :'geo_bounding_box' => :'Object',
        :'geo_distance' => :'Object',
        :'geo_polygon' => :'Object',
        :'geo_shape' => :'Object',
        :'has_child' => :'Object',
        :'has_parent' => :'Object',
        :'ids' => :'Object',
        :'intervals' => :'Hash<String, Object>',
        :'knn' => :'Object',
        :'match' => :'Hash<String, Object>',
        :'match_all' => :'Object',
        :'match_bool_prefix' => :'Hash<String, Object>',
        :'match_none' => :'Object',
        :'match_phrase' => :'Hash<String, Object>',
        :'match_phrase_prefix' => :'Hash<String, Object>',
        :'more_like_this' => :'Object',
        :'multi_match' => :'Object',
        :'nested' => :'Object',
        :'parent_id' => :'Object',
        :'percolate' => :'Object',
        :'pinned' => :'Object',
        :'prefix' => :'Hash<String, Object>',
        :'query_string' => :'Object',
        :'range' => :'Hash<String, Object>',
        :'rank_feature' => :'Object',
        :'regexp' => :'Hash<String, Object>',
        :'script' => :'Object',
        :'script_score' => :'Object',
        :'shape' => :'Object',
        :'simple_query_string' => :'Object',
        :'span_containing' => :'Object',
        :'field_masking_span' => :'Object',
        :'span_first' => :'Object',
        :'span_multi' => :'Object',
        :'span_near' => :'Object',
        :'span_not' => :'Object',
        :'span_or' => :'Object',
        :'span_term' => :'Hash<String, Object>',
        :'span_within' => :'Object',
        :'term' => :'Hash<String, Object>',
        :'terms' => :'Object',
        :'terms_set' => :'Hash<String, Object>',
        :'wildcard' => :'Hash<String, Object>',
        :'wrapper' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'bool',
        :'boosting',
        :'combined_fields',
        :'constant_score',
        :'dis_max',
        :'distance_feature',
        :'exists',
        :'function_score',
        :'geo_bounding_box',
        :'geo_distance',
        :'geo_polygon',
        :'geo_shape',
        :'has_child',
        :'has_parent',
        :'ids',
        :'knn',
        :'match_all',
        :'match_none',
        :'more_like_this',
        :'multi_match',
        :'nested',
        :'parent_id',
        :'percolate',
        :'pinned',
        :'query_string',
        :'rank_feature',
        :'script',
        :'script_score',
        :'shape',
        :'simple_query_string',
        :'span_containing',
        :'field_masking_span',
        :'span_first',
        :'span_multi',
        :'span_near',
        :'span_not',
        :'span_or',
        :'span_within',
        :'terms',
        :'wrapper'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::UserDefinedObjectStructure` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::UserDefinedObjectStructure`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'bool')
        self.bool = attributes[:'bool']
      end

      if attributes.key?(:'boosting')
        self.boosting = attributes[:'boosting']
      end

      if attributes.key?(:'combined_fields')
        self.combined_fields = attributes[:'combined_fields']
      end

      if attributes.key?(:'constant_score')
        self.constant_score = attributes[:'constant_score']
      end

      if attributes.key?(:'dis_max')
        self.dis_max = attributes[:'dis_max']
      end

      if attributes.key?(:'distance_feature')
        self.distance_feature = attributes[:'distance_feature']
      end

      if attributes.key?(:'exists')
        self.exists = attributes[:'exists']
      end

      if attributes.key?(:'function_score')
        self.function_score = attributes[:'function_score']
      end

      if attributes.key?(:'fuzzy')
        if (value = attributes[:'fuzzy']).is_a?(Hash)
          self.fuzzy = value
        end
      end

      if attributes.key?(:'geo_bounding_box')
        self.geo_bounding_box = attributes[:'geo_bounding_box']
      end

      if attributes.key?(:'geo_distance')
        self.geo_distance = attributes[:'geo_distance']
      end

      if attributes.key?(:'geo_polygon')
        self.geo_polygon = attributes[:'geo_polygon']
      end

      if attributes.key?(:'geo_shape')
        self.geo_shape = attributes[:'geo_shape']
      end

      if attributes.key?(:'has_child')
        self.has_child = attributes[:'has_child']
      end

      if attributes.key?(:'has_parent')
        self.has_parent = attributes[:'has_parent']
      end

      if attributes.key?(:'ids')
        self.ids = attributes[:'ids']
      end

      if attributes.key?(:'intervals')
        if (value = attributes[:'intervals']).is_a?(Hash)
          self.intervals = value
        end
      end

      if attributes.key?(:'knn')
        self.knn = attributes[:'knn']
      end

      if attributes.key?(:'match')
        if (value = attributes[:'match']).is_a?(Hash)
          self.match = value
        end
      end

      if attributes.key?(:'match_all')
        self.match_all = attributes[:'match_all']
      end

      if attributes.key?(:'match_bool_prefix')
        if (value = attributes[:'match_bool_prefix']).is_a?(Hash)
          self.match_bool_prefix = value
        end
      end

      if attributes.key?(:'match_none')
        self.match_none = attributes[:'match_none']
      end

      if attributes.key?(:'match_phrase')
        if (value = attributes[:'match_phrase']).is_a?(Hash)
          self.match_phrase = value
        end
      end

      if attributes.key?(:'match_phrase_prefix')
        if (value = attributes[:'match_phrase_prefix']).is_a?(Hash)
          self.match_phrase_prefix = value
        end
      end

      if attributes.key?(:'more_like_this')
        self.more_like_this = attributes[:'more_like_this']
      end

      if attributes.key?(:'multi_match')
        self.multi_match = attributes[:'multi_match']
      end

      if attributes.key?(:'nested')
        self.nested = attributes[:'nested']
      end

      if attributes.key?(:'parent_id')
        self.parent_id = attributes[:'parent_id']
      end

      if attributes.key?(:'percolate')
        self.percolate = attributes[:'percolate']
      end

      if attributes.key?(:'pinned')
        self.pinned = attributes[:'pinned']
      end

      if attributes.key?(:'prefix')
        if (value = attributes[:'prefix']).is_a?(Hash)
          self.prefix = value
        end
      end

      if attributes.key?(:'query_string')
        self.query_string = attributes[:'query_string']
      end

      if attributes.key?(:'range')
        if (value = attributes[:'range']).is_a?(Hash)
          self.range = value
        end
      end

      if attributes.key?(:'rank_feature')
        self.rank_feature = attributes[:'rank_feature']
      end

      if attributes.key?(:'regexp')
        if (value = attributes[:'regexp']).is_a?(Hash)
          self.regexp = value
        end
      end

      if attributes.key?(:'script')
        self.script = attributes[:'script']
      end

      if attributes.key?(:'script_score')
        self.script_score = attributes[:'script_score']
      end

      if attributes.key?(:'shape')
        self.shape = attributes[:'shape']
      end

      if attributes.key?(:'simple_query_string')
        self.simple_query_string = attributes[:'simple_query_string']
      end

      if attributes.key?(:'span_containing')
        self.span_containing = attributes[:'span_containing']
      end

      if attributes.key?(:'field_masking_span')
        self.field_masking_span = attributes[:'field_masking_span']
      end

      if attributes.key?(:'span_first')
        self.span_first = attributes[:'span_first']
      end

      if attributes.key?(:'span_multi')
        self.span_multi = attributes[:'span_multi']
      end

      if attributes.key?(:'span_near')
        self.span_near = attributes[:'span_near']
      end

      if attributes.key?(:'span_not')
        self.span_not = attributes[:'span_not']
      end

      if attributes.key?(:'span_or')
        self.span_or = attributes[:'span_or']
      end

      if attributes.key?(:'span_term')
        if (value = attributes[:'span_term']).is_a?(Hash)
          self.span_term = value
        end
      end

      if attributes.key?(:'span_within')
        self.span_within = attributes[:'span_within']
      end

      if attributes.key?(:'term')
        if (value = attributes[:'term']).is_a?(Hash)
          self.term = value
        end
      end

      if attributes.key?(:'terms')
        self.terms = attributes[:'terms']
      end

      if attributes.key?(:'terms_set')
        if (value = attributes[:'terms_set']).is_a?(Hash)
          self.terms_set = value
        end
      end

      if attributes.key?(:'wildcard')
        if (value = attributes[:'wildcard']).is_a?(Hash)
          self.wildcard = value
        end
      end

      if attributes.key?(:'wrapper')
        self.wrapper = attributes[:'wrapper']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          bool == o.bool &&
          boosting == o.boosting &&
          combined_fields == o.combined_fields &&
          constant_score == o.constant_score &&
          dis_max == o.dis_max &&
          distance_feature == o.distance_feature &&
          exists == o.exists &&
          function_score == o.function_score &&
          fuzzy == o.fuzzy &&
          geo_bounding_box == o.geo_bounding_box &&
          geo_distance == o.geo_distance &&
          geo_polygon == o.geo_polygon &&
          geo_shape == o.geo_shape &&
          has_child == o.has_child &&
          has_parent == o.has_parent &&
          ids == o.ids &&
          intervals == o.intervals &&
          knn == o.knn &&
          match == o.match &&
          match_all == o.match_all &&
          match_bool_prefix == o.match_bool_prefix &&
          match_none == o.match_none &&
          match_phrase == o.match_phrase &&
          match_phrase_prefix == o.match_phrase_prefix &&
          more_like_this == o.more_like_this &&
          multi_match == o.multi_match &&
          nested == o.nested &&
          parent_id == o.parent_id &&
          percolate == o.percolate &&
          pinned == o.pinned &&
          prefix == o.prefix &&
          query_string == o.query_string &&
          range == o.range &&
          rank_feature == o.rank_feature &&
          regexp == o.regexp &&
          script == o.script &&
          script_score == o.script_score &&
          shape == o.shape &&
          simple_query_string == o.simple_query_string &&
          span_containing == o.span_containing &&
          field_masking_span == o.field_masking_span &&
          span_first == o.span_first &&
          span_multi == o.span_multi &&
          span_near == o.span_near &&
          span_not == o.span_not &&
          span_or == o.span_or &&
          span_term == o.span_term &&
          span_within == o.span_within &&
          term == o.term &&
          terms == o.terms &&
          terms_set == o.terms_set &&
          wildcard == o.wildcard &&
          wrapper == o.wrapper
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [bool, boosting, combined_fields, constant_score, dis_max, distance_feature, exists, function_score, fuzzy, geo_bounding_box, geo_distance, geo_polygon, geo_shape, has_child, has_parent, ids, intervals, knn, match, match_all, match_bool_prefix, match_none, match_phrase, match_phrase_prefix, more_like_this, multi_match, nested, parent_id, percolate, pinned, prefix, query_string, range, rank_feature, regexp, script, script_score, shape, simple_query_string, span_containing, field_masking_span, span_first, span_multi, span_near, span_not, span_or, span_term, span_within, term, terms, terms_set, wildcard, wrapper].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenapiClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
