=begin
#OpenSearch

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 2021-11-23

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.1

=end

require 'date'
require 'time'

module OpenapiClient
  class PostSearchWithIndexRequestContent
    attr_accessor :docvalue_fields

    attr_accessor :explain

    attr_accessor :from

    attr_accessor :seq_no_primary_term

    attr_accessor :size

    attr_accessor :source

    attr_accessor :stats

    attr_accessor :terminate_after

    attr_accessor :timeout

    attr_accessor :version

    attr_accessor :fields

    attr_accessor :min_score

    attr_accessor :indices_boost

    attr_accessor :query

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'docvalue_fields' => :'docvalue_fields',
        :'explain' => :'explain',
        :'from' => :'from',
        :'seq_no_primary_term' => :'seq_no_primary_term',
        :'size' => :'size',
        :'source' => :'source',
        :'stats' => :'stats',
        :'terminate_after' => :'terminate_after',
        :'timeout' => :'timeout',
        :'version' => :'version',
        :'fields' => :'fields',
        :'min_score' => :'min_score',
        :'indices_boost' => :'indices_boost',
        :'query' => :'query'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'docvalue_fields' => :'String',
        :'explain' => :'Boolean',
        :'from' => :'Integer',
        :'seq_no_primary_term' => :'Boolean',
        :'size' => :'Integer',
        :'source' => :'String',
        :'stats' => :'String',
        :'terminate_after' => :'Integer',
        :'timeout' => :'String',
        :'version' => :'Boolean',
        :'fields' => :'Array<String>',
        :'min_score' => :'Integer',
        :'indices_boost' => :'Array<Object>',
        :'query' => :'UserDefinedObjectStructure'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::PostSearchWithIndexRequestContent` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::PostSearchWithIndexRequestContent`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'docvalue_fields')
        self.docvalue_fields = attributes[:'docvalue_fields']
      end

      if attributes.key?(:'explain')
        self.explain = attributes[:'explain']
      end

      if attributes.key?(:'from')
        self.from = attributes[:'from']
      end

      if attributes.key?(:'seq_no_primary_term')
        self.seq_no_primary_term = attributes[:'seq_no_primary_term']
      end

      if attributes.key?(:'size')
        self.size = attributes[:'size']
      end

      if attributes.key?(:'source')
        self.source = attributes[:'source']
      end

      if attributes.key?(:'stats')
        self.stats = attributes[:'stats']
      end

      if attributes.key?(:'terminate_after')
        self.terminate_after = attributes[:'terminate_after']
      end

      if attributes.key?(:'timeout')
        self.timeout = attributes[:'timeout']
      end

      if attributes.key?(:'version')
        self.version = attributes[:'version']
      end

      if attributes.key?(:'fields')
        if (value = attributes[:'fields']).is_a?(Array)
          self.fields = value
        end
      end

      if attributes.key?(:'min_score')
        self.min_score = attributes[:'min_score']
      end

      if attributes.key?(:'indices_boost')
        if (value = attributes[:'indices_boost']).is_a?(Array)
          self.indices_boost = value
        end
      end

      if attributes.key?(:'query')
        self.query = attributes[:'query']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      pattern = Regexp.new(/^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$/)
      if !@timeout.nil? && @timeout !~ pattern
        invalid_properties.push("invalid value for \"timeout\", must conform to the pattern #{pattern}.")
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@timeout.nil? && @timeout !~ Regexp.new(/^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$/)
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] timeout Value to be assigned
    def timeout=(timeout)
      pattern = Regexp.new(/^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$/)
      if !timeout.nil? && timeout !~ pattern
        fail ArgumentError, "invalid value for \"timeout\", must conform to the pattern #{pattern}."
      end

      @timeout = timeout
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          docvalue_fields == o.docvalue_fields &&
          explain == o.explain &&
          from == o.from &&
          seq_no_primary_term == o.seq_no_primary_term &&
          size == o.size &&
          source == o.source &&
          stats == o.stats &&
          terminate_after == o.terminate_after &&
          timeout == o.timeout &&
          version == o.version &&
          fields == o.fields &&
          min_score == o.min_score &&
          indices_boost == o.indices_boost &&
          query == o.query
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [docvalue_fields, explain, from, seq_no_primary_term, size, source, stats, terminate_after, timeout, version, fields, min_score, indices_boost, query].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenapiClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
